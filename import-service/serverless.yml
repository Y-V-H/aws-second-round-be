service: import-service
frameworkVersion: "3"
useDotenv: true

plugins:
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: eu-west-1
  httpApi:
    cors: true
    authorizers:
      customAuthorizer:
        type: request
        functionArn: arn:aws:lambda:eu-west-1:827936631780:function:authorization-service-dev-basicAuthorizer

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action: "s3:ListBucket"
      Resource: ${env:S3BUCKET_ARN}
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: ${env:S3BUCKET_ARN}/*
    - Effect: "Allow"
      Action: "sqs:*"
      Resource: ${env:SQS_ARN}
    - Effect: "Allow"
      Action: "sns:*"
      Resource:
        Ref: createProductTopicSnS
    - Effect: Allow
      Action: "dynamodb:*"
      Resource: ${env:DYNAMODB_PRODUCTS_ARN}
    - Effect: Allow
      Action: "dynamodb:*"
      Resource: ${env:DYNAMODB_STOCKS_ARN}

  # you can define service wide environment variables here
  environment:
    UPLOADED_BUCKET: "task-5-uploaded"
    SQS_URL: ${env:SQS_URL}
    SNS_ARN: ${env:SNS_ARN}

functions:
  importProductsFile:
    handler: handlers/importProductsFile.importProductsFile
    events:
      - httpApi:
          path: /import
          method: get
          authorizer:
            name: customAuthorizer
            type: request

  importFileParser:
    handler: handlers/importFileParser.importFileParser
    events:
      - s3:
          bucket: task-5-uploaded-y-hurynovich
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true

  catalogBatchProcess:
    handler: handlers/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    createProductTopicSnS:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopicSnS
    snsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:EMAIL}
        Protocol: email
        TopicArn:
          Ref: createProductTopicSnS
